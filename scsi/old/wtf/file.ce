
#if defined(CONFIG_UML) /* User Mode */
static int vscsi_file_open(char *path, void **fp) {
	struct openflags flags;
	long long fd;

	printk("vscsi_file_open: path: %s\n", path);
	flags.r = flags.w = 1;
	fd = os_open_file(path, flags, 0);
	printk("vscsi_file_open: fd: %lld\n", fd);
	if (fd < 0) return 1;
	*fp = (void *) fd;
	return 0;
}

static int vscsi_file_size(char *path, unsigned long long *size) {
	return os_file_size(path,size);
}

static int vscsi_file_rw(void *fp, struct scsi_cmnd *scp, unsigned long long lba, int num, int write) {
	struct scatterlist *sg;
#if LINUX_VERSION_CODE > KERNEL_VERSION(2,6,22)
	struct scsi_data_buffer *sdb = scsi_in(scp);
	long long fd = (long long) fp;
	unsigned long long offset;
	int i;

	if (!sdb->length) return 0;
	if (!sdb->table.sgl) return (DID_ERROR << 16);
//	if (!(scsi_bidi_cmnd(scp) || scp->sc_data_direction == DMA_FROM_DEVICE)) return (DID_ERROR << 16);

	offset = lba*scp->device->sector_size;
	printk("vscsi_file_rw: offset: %lld\n", offset);
	os_seek_file(fd,offset);
	for_each_sg(sdb->table.sgl, sg, sdb->table.nents, i) {
		if (os_read_file(fd,sg_virt(sg),sg->length) < 0) {
			printk(KERN_ERR "vscsi_file_rw: file read error!\n");
			return 1;
		}
#if 0
		memset(sg_virt(sg),0,sg->length);
		sprintf(temp,"file_read: offset: %lld", offset);
		dump_data(0,temp,sg_virt(sg),sg->length);
		offset += sg->length;
#endif
	}
#else
	/* Scatter/Gather */
	if (scp->use_sg) {
		sg = (struct scatterlist *)scp->request_buffer;
		buffer = page_address(sg->page) + sg->offset;
		buflen = sg->length;
	/* Direct */
	} else {
		buffer = scp->request_buffer;
		buflen = scp->request_bufflen;
        }
#endif

	return 0;
}
#else /* Native */
static int vscsi_file_open(char *path, void **fp) {
	printk("vscsi_file_open: path: %s\n", path);
	return 1;
}

static int vscsi_file_size(char *path, unsigned long long *size) {
	return 1;
}

static int vscsi_file_rw(void *fp, struct scsi_cmnd *scp, unsigned long long lba, int num, int write) {
	return 1;
}
#endif
