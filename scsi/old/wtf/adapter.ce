
/* Keep sg size to <= 1 page */
#define VSCSI_SGSIZE ( 4096 / sizeof(struct scatterlist) )
#define VSCSI_CLUSTERING	0
#define VSCSI_DUMP_PARAMS	1

struct scsi_host_template vscsi_template = {
	.module			= THIS_MODULE,
	.name			= "Virtual SCSI Adapter",
	.proc_name		= "vscsi",
	.queuecommand		= vscsi_queue,
	.slave_configure	= vscsi_config,
	.this_id		= -1,
	.sg_tablesize		= VSCSI_SGSIZE,
	.max_sectors		= 0xFFFF,
	.can_queue		= 65535,
	.cmd_per_lun		= 2048,
	.use_clustering		= VSCSI_CLUSTERING,
	.eh_device_reset_handler = vscsi_device_reset,
//	.skip_settle_delay	= 1,
//	.max_host_blocked	= 1,
};

extern int scsi_scan_host_selected(struct Scsi_Host *, unsigned int, unsigned int, unsigned int, int);

static int init_adapter(struct device *dev) {
	struct Scsi_Host *shost;
//	struct vscsi_device *dp;
	int rc;

	/* Get shost */
	printk("vSCSI: allocating host...\n");
	shost = scsi_host_alloc(&vscsi_template, sizeof(void *));
	if (!shost) {
		printk(KERN_ERR "vSCSI: init_adapter: scsi_host_alloc failed\n");
		return -ENOMEM;
	}
	printk("vSCSI: shost: %p\n", shost);

	/* Set params */
//	shost->irq = VSCSI_IRQ;
	shost->max_channel = VSCSI_MAX_CHAN;
	shost->max_id = VSCSI_MAX_ID;
	shost->max_lun = VSCSI_MAX_LUN;

	shost->io_port = 0;
	shost->n_io_port = 0;
	shost->dma_channel = -1;

#if VSCSI_DUMP_PARAMS
#define SDUMP(s,f) printk(KERN_INFO "  %16s: %d\n", #f, (s)->f)
	printk(KERN_INFO "COSCSI: host parameters:\n");
	SDUMP(shost,max_id);
	SDUMP(shost,max_lun);
	SDUMP(shost,max_channel);
	SDUMP(shost,unique_id);
	SDUMP(&vscsi_template,can_queue);
	SDUMP(&vscsi_template,cmd_per_lun);
	SDUMP(&vscsi_template,sg_tablesize);
	SDUMP(&vscsi_template,max_sectors);
	SDUMP(&vscsi_template,use_clustering);
	SDUMP(shost,use_blk_tcq);
	SDUMP(shost,reverse_ordering);
//	SDUMP(&vscsi_template,ordered_tag);
	SDUMP(&vscsi_template,max_host_blocked);
#undef SDUMP
#endif

	/* Add host */
	printk("vSCSI: adding host...\n");
	rc = scsi_add_host(shost, dev);
	if (rc) {
		printk(KERN_ERR "vSCSI: init_adapter: scsi_add_host failed\n");
		goto err_put;
	}
	dev_set_drvdata(dev, shost);

	/* Scan devs */
	printk("vSCSI: Scanning...\n");
	scsi_scan_host(shost);

	return 0;

err_put:
	scsi_host_put(shost);
	return rc;
}
